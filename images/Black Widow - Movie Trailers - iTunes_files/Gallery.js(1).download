/*global define */

define([
	'marionette',
	'templates/templates',
	'tinyscroll'
], function (Marionette, templates) {
	'use strict';

	// ========================================================
	//
	// SET UP THE TRAY
	//
	// ========================================================
	var Thumbnail = Marionette.ItemView.extend({
		tagName: "li",
		className: "photo-thumb",
		template: templates.thumbnail,
		events: {
			"click": "clicked",
		},
		clicked: function(event){
			event.preventDefault();
			this.trigger('overlay:thumb:clicked', this.model);
		}
	});

	var Tray = Marionette.CollectionView.extend({
		itemView: Thumbnail,
		template: templates.galleryTray,
		initialize: function(){
			this.on('itemview:overlay:thumb:clicked', this.setPhotoPositions.bind(this));
		},
		setPhotoPositions: function(childView, model){
			this.nextPhoto = this.collection.next(model);
			this.prevPhoto = this.collection.prev(model);
		},
		onShow: function(){
			this.scrollbar = $('#gallery-tray').tinyscrollbar({ axis: 'x'});
			// So Dirty to do it this way
			var tray = this;
            $(document).on('keydown', function(e){

                if(e.keyCode == 37 ) tray.gotoPrevPhoto(); //Left
                if(e.keyCode == 39 ) tray.gotoNextPhoto(); //Right

            });

			// Native Listeners
			var resizeTimer;
			$(window).on('resize', function(){
				clearTimeout(resizeTimer);
					resizeTimer = setTimeout(function(){
					$('#gallery-tray').tinyscrollbar_update();
				}, 300);
			});
		},
		gotoPrevPhoto: function(){
			this.trigger('overlay:arrow:pressed', null, this.prevPhoto);
		},
		gotoNextPhoto: function(){
			this.trigger('overlay:arrow:pressed', null, this.nextPhoto);
		},
		onHide: function(){
			$(window).off("resize");
			$(document).off('keydown');
		}
	});

	// ========================================================
	//
	// SET UP THE STAGE
	//
	// ========================================================
	var Stage = Marionette.ItemView.extend({
		className: "photo-stage",
		template: templates.galleryStage,
		onRender: function(){
			this.$el.hide().fadeIn();

            this.close_button   = this.$el.find('.close-overlay');
            this.left_arrow     = this.$el.find('.arrow-left');
            this.right_arrow    = this.$el.find('.arrow-right');

			var stage = this;

			this.close_button.on('click', 	function(e){e.preventDefault(); stage.trigger('overlay:close:clicked');});
			this.left_arrow.on('click', 	function(e){e.preventDefault(); stage.trigger('stage:left:clicked');});
			this.right_arrow.on('click', 	function(e){e.preventDefault(); stage.trigger('stage:right:clicked');});
			this.close_button.show();
		},
		onClose: function(){
			this.close_button.off('click');
			this.left_arrow.off('click');
			this.right_arrow.off('click');
		}
	});


	return Marionette.Layout.extend({
		regions: {
            galleryStage    : "#gallery-stage",
            galleryTray     : "#photo-strip"
		},
		initialize: function(){
			_.bindAll(this);
			this.tray 	= new Tray({collection:this.collection, tagName: "ul", id:"photo-scroll", className: "photo-scroll"});
			this.stage 	= new Stage();
			this.tray.on('itemview:overlay:thumb:clicked', 	this.setActivePhoto.bind(this));
			this.tray.on('overlay:arrow:pressed', 			this.setActivePhoto.bind(this));

			this.stage.on('overlay:close:clicked', 	this.closeOverlay.bind(this));
			this.stage.on('stage:right:clicked', 	this.tray.gotoNextPhoto.bind(this.tray));
			this.stage.on('stage:left:clicked', 	this.tray.gotoPrevPhoto.bind(this.tray));
		},
		closeOverlay: function(){
			this.trigger('close:clicked');
		},
		onShow: function(){
			_.bindAll();
			this.stage.model = this.model;

			this.galleryTray.show(this.tray);
			this.galleryStage.show(this.stage);
			this.setActivePhoto(null, this.model);
		},
		getNext: function(){

		},
		getPrevious: function(){

		},
		setActivePhoto: function(childview, model){
			var active_item 	= this.tray.children.findByModel(model).$el,
				active_width 	= ($(document).width()/2) - (active_item.width()/2),
				active_positon 	= active_item.position(),
				new_position 	= active_positon.left-active_width;
				this.getPrevious();
				this.getNext();

			this.tray.setPhotoPositions(null, model);
			active_item.addClass('active').siblings().removeClass('active');
			this.tray.scrollbar.tinyscrollbar_update(new_position);

			// Set Sage and Render
			this.stage.model 	= model;
			this.stage.render();

		},
		template: templates.galleryLayout
	});

});
